NAME:
=====
	Amina Ahmed
	
IMPLEMENTATION DETAILS:
===========
    Implemented FIFO
    Implemented SJF 
    Implemented PRIORITY


TEST SUITE
==========================
1. hello_thread.c - this is a simple start program to show that all options work at the very least
2. premept_thread.c - this is to test the premption implemented in SJP and FIFO
3. test_three_threads_sjf.c - this shows that the shortest jobs are scheduled first. I used victors test case since it was pretty good. 
4. test_invalid.c - for all policies, this tests if they do well to handle all kinds of invalid requests. This is built further upon one of the shared test cases
5. thread_yield.c - for all policies, this ensures that the yield function works as expected. 
6. test_quantum.c - for FIFO, this shows that when a thread takes longer than its given quantum, its priority is decreased and quantum is increased.
7. priority_stress.c - this launches processes with different priorities. the userthread_log_txt should display that they all run with the threads with higher priority running more often than others. (this test does not pass due to the signal error in priorty)
8. sjf_stress.c - this launches three different jobs that take different times and ensures that exp. aging is used to schedule them in the correct order. 
9. random_join.c - this test ensures the proper working of the join regardless of the order of the threads. 
10. test_priority.c - this ensures that tasks are executed in order of their priority
11. test_logging.c - this ensures that the logging works for each policy 

New Tests:
12. priority scheduling - this tests the priority scheduling policy by creating threads with different priorities and ensuring that the highest priority thread runs first.
13. sjf scheduling - this tests the sjf scheduling policy by creating threads with different run times and ensuring that the shortest job runs first.
14. misuse - this tests the misuse of the library by creating threads that are not initialized properly and ensuring that the library handles it properly.
15. nested_fifo - this should result in an infinite loop since the threads are created in a nested fashion.


Here are some short descriptions of what the tests are supposed to check:
 0 fcfs - PASSED
 1 fcfs - PASSED
 2 fcfs - PASSED
 3 fcfs - PASSED                  
 4 fcfs - PASSED
 5 fcfs - PASSED
 6 fcfs - PASSED
 7 fcfs - PASSED
 8 fcfs - PASSED                                 
 9 fcfs - PASSED                  
 10 fcfs -                  FAILED
 11 fcfs - PASSED
 12 fcfs -                  FAILED because it obeys: If the caller is the only runnable thread, it will be selected to run again, in other words, the yield will have no effect 
 13 fcfs - PASSED                 
 14 fcfs - PASSED
 15 fcfs - PASSED
 18 fcfs - PASSED
 19 fcfs - PASSED                 
test_nested_fifo - PASSED


 16 sjf - PASSED
 17 sjf - PASSED
 20 sjf -               FAILED
 21 sjf - PASSED
 22 sjf - PASSED
 23 sjf - PASSED
 test_nested_sjf - PASSED
 test_sjf_yield -       FAILED 

test_priority_simple             PASSED
test_priority_quanta                        FAILED
test_priority_same_priority     PASSED
test_priority_invalid           PASSED
test_priority_yield             PASSED
test_priority_join              PASSED      
test_priority_cpu_1                        ?
test_priority_cpu_2                        ?

test_misuse                     PASSED
test_misuse_terminate           PASSED